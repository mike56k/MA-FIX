{"version":3,"sources":["App.js","sw.js","index.js"],"names":["App","props","parseQueryString","string","slice","split","map","queryParam","kvp","key","value","reduce","query","getImage","a","image","document","getElementById","alert","setState","state","user","bridge","send","then","this","window","location","search","hash","activePanel","id","status","before","size","src","photo_100","first_name","header","mode","weight","type","onClick","style","textAlign","alt","React","Component","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","isLocalhost","Boolean","hostname","match","URL","process","origin","addEventListener","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","ReactDOM","render"],"mappings":"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","file":"static/js/main.a7876c5a.chunk.js","sourcesContent":["import React from \"react\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport {\n  Avatar,\n  Button,\n  Div,\n  FormLayout,\n  Group,\n  Header,\n  Input,\n  Panel,\n  PanelHeader,\n  PanelHeaderContent,\n  Text,\n  View,\n} from \"@vkontakte/vkui\";\n\nimport \"@vkontakte/vkui/dist/vkui.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: null,\n      image: null,\n    };\n  }\n  parseQueryString = (string) => {\n    return string\n      .slice(1)\n      .split(\"&\")\n      .map((queryParam) => {\n        let kvp = queryParam.split(\"=\");\n        return { key: kvp[0], value: kvp[1] };\n      })\n      .reduce((query, kvp) => {\n        query[kvp.key] = kvp.value;\n        return query;\n      }, {});\n  };\n  componentDidMount() {\n    bridge.send(\"VKWebAppGetUserInfo\", {}).then((user) => {\n      this.setState({ user: user });\n    });\n  }\n\n  getImage = async () => {\n    const image = document.getElementById(\"url\").value;\n\n    if (image) {\n      alert({ image });\n      this.setState({ image: image });\n    }\n  };\n\n  render() {\n    const queryParams = this.parseQueryString(window.location.search);\n    const hashParams = this.parseQueryString(window.location.hash);\n    return (\n      <View activePanel=\"main\">\n        <Panel id=\"main\">\n          <PanelHeader>\n            {this.state.user ? (\n              <PanelHeaderContent\n                status=\"VK Apps Image Example\"\n                before={<Avatar size={36} src={this.state.user.photo_100} />}\n              >\n                {this.state.user.first_name}\n              </PanelHeaderContent>\n            ) : (\n              \"VK Apps Image Example\"\n            )}\n          </PanelHeader>\n\n          <Group header={<Header mode=\"secondary\">Задание</Header>}>\n            <Div>Изменил ББББ</Div>\n            <Div>\n              Для облегчения тестирования можно использовать картинку{\" \"}\n              <Text weight=\"semibold\">https://service.pavel.im/image</Text>{\" \"}\n              (good code — все круто, bad code — сервер получил параметры\n              запуска)\n            </Div>\n\n            <FormLayout>\n              <Input type=\"text\" id=\"url\" />\n\n              <Button size=\"xl\" onClick={this.getImage}>\n                Загрузить\n              </Button>\n            </FormLayout>\n\n            {this.state.image && this.state.user && (\n              <Div style={{ textAlign: \"center\" }}>\n                <img src={this.state.image} alt=\"remote file\" />\n              </Div>\n            )}\n          </Group>\n        </Panel>\n      </View>\n    );\n  }\n}\n\nexport default App;\n","function registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import \"core-js/es6/map\";\nimport \"core-js/es6/set\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./sw\";\n\nbridge.send(\"VKWebAppInit\", {});\nregisterServiceWorker();\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}