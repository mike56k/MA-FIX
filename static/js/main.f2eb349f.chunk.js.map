{"version":3,"sources":["App.js","sw.js","index.js"],"names":["App","props","_isMounted","_isLoaded","getImage","a","image","document","getElementById","value","setState","state","alert","this","prevProps","prevState","activePanel","id","header","mode","weight","type","size","onClick","style","textAlign","src","alt","React","Component","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","isLocalhost","Boolean","window","location","hostname","match","bridge","send","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","ReactDOM","render"],"mappings":"uTAuGeA,G,yDAnFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,YAAa,EARM,EASnBC,WAAY,EATO,EAsBnBC,SAtBmB,sBAsBR,4BAAAC,EAAA,uDACHC,EAAQC,SAASC,eAAe,OAAOC,SAE3C,EAAKC,SAAS,CAAEJ,MAAOA,IACvB,EAAKH,WAAY,GAJV,2CAnBT,EAAKQ,MAAQ,CAEXL,MAAO,MALQ,E,gEAWjBM,MAAM,S,6CASNC,KAAKX,YAAa,I,yCASDY,EAAWC,GACxBA,EAAUT,QAAUO,KAAKF,MAAML,QACjCO,KAAKV,WAAY,EACjBS,MAAM,oB,+BAIR,OACE,kBAAC,IAAD,CAAMI,YAAY,QAChB,kBAAC,IAAD,CAAOC,GAAG,QAcR,kBAAC,IAAD,CAAOC,OAAQ,kBAAC,IAAD,CAAQC,KAAK,aAAb,+CACb,kBAAC,IAAD,4EACA,kBAAC,IAAD,mVACgE,IAC9D,kBAAC,IAAD,CAAMC,OAAO,YAAb,kCAA8D,IAFhE,2QAOA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,OAAOJ,GAAG,QAEtB,kBAAC,IAAD,CAAQK,KAAK,KAAKC,QAASV,KAAKT,UAAhC,2DAKDS,KAAKF,MAAML,OACV,kBAAC,IAAD,CAAKkB,MAAO,CAAEC,UAAW,WACtBZ,KAAKV,WACJ,yBAAKuB,IAAKb,KAAKF,MAAML,MAAOqB,IAAI,wB,GAzEhCC,IAAMC,YCnBxB,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3B,QACfqB,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAACC,GACNH,QAAQG,MAAM,4CAA6CA,MA+BjE,IAAMC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCtDNC,IAAOC,KAAK,eAAgB,ID0Db,WACb,GAA6C,kBAAmBrB,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,UAAwBP,OAAOC,UAC3CO,SAAWR,OAAOC,SAASO,OAIvC,OAGFR,OAAOS,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMwB,UAAN,sBAEPT,IAnDV,SAAiCf,GAE/B2B,MAAM3B,GACHI,MAAK,SAACwB,GAGiB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAACC,GAClCA,EAAa6B,aAAa9B,MAAK,WAC7Ba,OAAOC,SAASiB,eAKpBpC,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEA+BAwB,CAAwBpC,GAIxBC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCO,QAAQC,IACN,gHAMJb,EAAgBC,OCrFxBqC,GAEAC,IAASC,OAAO,kBAAC,EAAD,MAAS/D,SAASC,eAAe,W","file":"static/js/main.f2eb349f.chunk.js","sourcesContent":["import React from \"react\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport {\n  Avatar,\n  Button,\n  Div,\n  FormLayout,\n  Group,\n  Header,\n  Input,\n  Panel,\n  PanelHeader,\n  PanelHeaderContent,\n  Text,\n  View,\n} from \"@vkontakte/vkui\";\n\nimport \"@vkontakte/vkui/dist/vkui.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      //    user: null,\n      image: null,\n    };\n  }\n  _isMounted = true;\n  _isLoaded = false;\n  componentDidMount() {\n    alert(\"OK?\");\n    // bridge.send(\"VKWebAppGetUserInfo\", {}).then((user) => {\n    //   if (this._isMounted) {\n    //     this.setState({ user: user });\n    //     this._isMounted = false;\n    //   }\n    // });\n  }\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n  getImage = async () => {\n    const image = document.getElementById(\"url\").value;\n    if (image) {\n      this.setState({ image: image });\n      this._isLoaded = true;\n    }\n  };\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.image !== this.state.image) {\n      this._isLoaded = false;\n      alert(\"IMAGE CHANGED\");\n    }\n  }\n  render() {\n    return (\n      <View activePanel=\"main\">\n        <Panel id=\"main\">\n          {/* <PanelHeader>\n            {this.state.user ? (\n              <PanelHeaderContent\n                status=\"VK Apps Image Example\"\n                before={<Avatar size={36} src={this.state.user.photo_100} />}\n              >\n                {this.state.user.first_name}\n              </PanelHeaderContent>\n            ) : (\n              \"VK Apps Image Example\"\n            )}\n          </PanelHeader> */}\n\n          <Group header={<Header mode=\"secondary\">Задание</Header>}>\n            <Div>Изменил ББББ</Div>\n            <Div>\n              Для облегчения тестирования НУ КА можно использовать картинку{\" \"}\n              <Text weight=\"semibold\">https://service.pavel.im/image</Text>{\" \"}\n              (good code — все круто, bad code — сервер получил параметры\n              запуска)\n            </Div>\n\n            <FormLayout>\n              <Input type=\"text\" id=\"url\" />\n\n              <Button size=\"xl\" onClick={this.getImage}>\n                Загрузить\n              </Button>\n            </FormLayout>\n\n            {this.state.image && (\n              <Div style={{ textAlign: \"center\" }}>\n                {this._isLoaded && (\n                  <img src={this.state.image} alt=\"remote file\" />\n                )}\n              </Div>\n            )}\n          </Group>\n        </Panel>\n      </View>\n    );\n  }\n}\n\nexport default App;\n","function registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import \"core-js/es6/map\";\nimport \"core-js/es6/set\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./sw\";\n\nbridge.send(\"VKWebAppInit\", {});\nregisterServiceWorker();\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}